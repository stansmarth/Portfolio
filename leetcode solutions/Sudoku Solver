class Solution:
    def __init__(self):
        super().__init__()
        self.steps = set()
        self.board = None

    def print_board(self):
        row = 0
        for line in self.board:
            line = ['|'] + [line[i]+' |' if (i+1)%3 ==0 else line[i]  for i in range(len(line)) ]
            line = ' '.join(line)
            print(line)
            row +=1
            if row %3 == 0:
                print(''.join(['-']*len(line)))
        print()

    def is_valid(self, row, col, next_candidate):
        next_candidate = str(next_candidate)
        res = False

        exist_row_col = any([next_candidate == self.board[row][k] for k in range(9)]) or \
            any([next_candidate == self.board[k][col] for k in range(9)])
        exist_sub_box = False
        subrow = 3* (row//3)
        subcol = 3* (col//3)
        for i in range(subrow, subrow+3):
            for j in range(subcol, subcol+3):
                if self.board[i][j] == next_candidate:
                    exist_sub_box = True
        res = not exist_row_col and not exist_sub_box
        return res

    def place(self, row, col, next_candidate):
        next_candidate = str(next_candidate)
        self.board[row][col] = next_candidate
        self.steps.add((row, col))
    def remove(self, row, col):
        self.steps.discard((row, col))
        self.board[row][col] = '.'

    def backtrack(self, row, col):
        # start to run
        if row == len(self.board):
            return True
        if  self.board[row][col] == ".":
            
            for next_candidate in range(1, 10):
                if not self.is_valid(row, col, next_candidate):
                    continue
                self.place(row, col,next_candidate)

                if col == 8 and self.backtrack(row+1, 0):
                    return True
                elif col!=8 and self.backtrack(row, col+1):
                    return True

                self.remove(row, col)
        else:
            if col == 8 and self.backtrack(row+1, 0):
                return True
            elif col!=8 and self.backtrack(row, col+1):
                return True
        return False
    def solveSudoku(self, board: List[List[str]]) -> None:

        self.board = board

        self.backtrack(y)
